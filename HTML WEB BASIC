IP 인터넷 프로토콜 역할 : 지정한 IP주소에 패킷이라는 통신 단위로 데이터 전달
 → 출발지 IP와 목적지 IP를 입력하고 던지면 인터넷 노드에서 최종 목적지 서버까지 도달함.

TCP 프로토콜
 → IP, PORT, 전송 제어, 순서, 검증 정보 등….
 → 연결 지향 - TCP 3 way handshake (가상연결)
 → 순서 보장
 → 데이터 전달 보증
  → 신뢰할 수 있는 프로토콜이며 현재 대부분 TCP 사용

※ TCP 3 way handshake
 1. SYN : 접속 요청
 2. ACK : 요청 수락
 3. 데이터 전송

UDP 프로토콜
 → TCP와 달리 기능이 거의 없음
 → 연결지향 X, 순서 보장 X, 데이터 전달 보증 X
 → 데이터 전달 및 순서가 보장되지 않지만, 단순하고 빠름
 → IP와 거의 같음. +PORT, +체크섬 정도만 추가

PORT
 → 같은 IP 내에서 프로세스 구분
 → 0~1023 : 잘 알려진 포트들이 있으므로 사용하지 않는 것이 좋음
  ※ HTTP : 80 / HTTPS : 443 / FTP : 20, 21 / TELNET-23

DNS (도메인 네임 시스템)
 → IP대신 문자로 된 주소값을 사용이 가능

URI
 → Uniform : 리소스 식별하는 통일된 방식
 → Resource : 자원, URI로 식별할 수 있는 모든 것(제한 없음)
 → Identifier : 다른 항목과 구분하는데 필요한 정보
 → URL : Uniform Resource Locator : 로케이터를 이용하여 식별하는것
 → URN : Name을 이용하여 식별하는것. 현재는 거의 사용을 하지 않음
  → URI는 URL과 URN을 모두 포함하지만 URN은 보편화되지 않아서 URI와 URL을 같은 의미로 사용을 많이 함

HTTP
 → TEXT, 이미지, 음성, 영상 등 거의 모든 형태의 데이터 전송이 가능
 → 서버간에 데이터를 주고 받을 때도 특수한 경우를 제외하고는 대부분 HTTP 사용
  → HTTP/1.1 1997년 : 가장 많이 사용, 현재 웹에서 가장 많이 사용 함
  → HTTP/2 2015년 : 성능 개선 위주
  → HTTP/3 진행 중 : 기존에 많이 사용하던 TCP 대신에 UDP 사용, 성능 개선
  ※ HTTP3에서 UDP를 채택

※ 개발자도구 - 네트워크 - 우클릭해서 프로토콜 추가 : 현재 사용하는 HTTP 프로토콜 확인이 가능하다.

무상태 프로토콜 (Stateless)
 → 서버가 클라이언트 상태를 보존하지 않음
 → 서버 확장성이 높다는 장점이 있으나 클라이언트가 추가 데이터 전송
  → 이전 데이터를 저장하지 않기 때문에 클라이언트가 이전 데이터를 같이 보내야 한다.
  → 병렬처리하여 하나의 클라이언트에 대해서 서버를 여러개 둘 수 있음
  → 한계 : 로그인 한 사용자의 경우 쿠키나 서버 세션등에서 한계점이 발생함

비 연결성
 → 클라이언트의 요청을 받으면 응답을 해주고 바로 연결을 끊어버림
 → HTTP는 기본이 연결을 유지하지 않는 모델
 → 일반적으로 초 단위의 이하의 빠른 속도로 응답
 → 서버 자원을 매우 효율적으로 사용할 수 있음
 → 자바스크립트, CSS 등 수많은 자원이 새로 다운로드 되는 문제가 있어서 HTTP 지속 연결로 문제 해결
 → HTTP/2, HTTP/3에서 더 많은 최적화

스테이트리스 (Stateless)
 → 서버 개발자들이 어려워하는 업무
 → 같은 시간에 딱 맞추어 발생하는 대용량 트래픽
  → 예) 저녁 6:00 선착순 1000명 치킨 할인 이벤트 → 수만명 동시 요청

메시지
 → HTTP 요청 메시지 : GET /search?q=hello
 → HTTP 응답 메시지 : HTTP1.1 200 OK

HTTP 상태 코드
 → 200 : 성공
 → 400 : 클라이언트 요청 오류
 → 500 : 서버 내부 오류

HTTP 헤더 용도
 → HTTP 전송에 필요한 모든 부가 정보

HTTP 메시지 바디 용도
 → 실제 전송할 데이터 / 문서, 이미지, 영상, JSON 등등
